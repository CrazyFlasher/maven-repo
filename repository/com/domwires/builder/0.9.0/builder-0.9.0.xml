<?xml version="1.0"?>
<project name="domwires-builder" basedir="" default="package_swc">

	<property environment="env."/>
	<property name="FLEX_HOME" location="${env.FLEX_HOME}"/>
	<property name="FLASH_PLAYER_EXE" location="${env.FLASH_PLAYER_EXE}"/>
	<property name="FLASH_IDE_EXE" location="${env.FLASH_IDE_EXE}"/>
    <property name="version" value="0.9.0"/>
	<taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar" />

    <dirname property="imported.basedir" file="${user.home}/.m2/repository/com/domwires/builder/${version}"/>
    <property file="${imported.basedir}/common.properties"/>
    <property file="${imported.basedir}/server.properties"/>
    <property file="${basedir}/version.properties"/>

    <property name="sftp-path-suffix" value=""/>
    <property name="src" value="${basedir}/src"/>
    <property name="out" value="${basedir}/out"/>
    <property name="deploy.dir" location="${out}"/>
    <property name="doc" value="${out}/doc"/>
    <property name="swc" value="${out}/swc"/>
    <property name="swf" value="${out}/swf"/>
    <property name="path" value="."/>
    <!--<property name="maven.deploy.repo" value="https://raw.github.com/CrazyFlasher/maven-repo/master"/>-->

    <property name="flexunit" location="${imported.basedir}/../../flexunit"/>

    <!--Dependencies-->
    <property name="core_path" value="${basedir}/${path}"/>
    <property name="internal_libs_path" value="${basedir}/dependencies"/>

    <echo>${internal_libs_path}</echo>

    <property name="ver.num" value="${build.release.number}.${build.major.number}.${build.minor.number}"/>
	
	<taskdef resource="flexUnitTasks.tasks" classpath="${flexunit}/flexUnitTasks-4.2.0-20140410.jar"/>

    <target name="package_fat_swc" depends="clean,fat-swc,asdoc,test"/>

    <target name="package_swc" depends="clean,swc,asdoc,test"/>
    <target name="asdoc">
        <delete dir="${doc}"/>
        <asdoc output="${doc}" dir="${FLEX_HOME}" lenient="true" failonerror="true">
            <doc-sources path-element="${src}"/>
            <external-library-path dir="${core_path}" includes="**/*.swc"/>
            <external-library-path dir="${internal_libs_path}" includes="*.swc"/>
        </asdoc>
        <zip destfile="${swc}/${swc_name}" update="true">
            <zipfileset dir="${doc}" prefix="docs">
                <include name="*.*"/>
                <exclude name="ASDoc_Config.xml"/>
                <exclude name="overviews.xml"/>
            </zipfileset>
        </zip>
        <!--delete dir="${doc}"/-->
    </target>
    <target name="swc">
        <compc output="${swc}/${swc_name}">
            <load-config filename="${FLEX_HOME}/frameworks/flex-config.xml"/>
            <include-sources dir="${src}" includes="*"/>
            <external-library-path dir="${core_path}" includes="**/*"/>
            <external-library-path dir="${internal_libs_path}" includes="*.swc"/>
            <external-library-path dir="${FLEX_HOME}/frameworks/libs/player/${target-player}" includes="*"/>
            <external-library-path dir="${FLEX_HOME}/frameworks/libs/air" includes="*"/>
        </compc>
    </target>
    <target name="fat-swc">
        <compc output="${swc}/${swc_fat_name}">
            <load-config filename="${FLEX_HOME}/frameworks/flex-config.xml"/>
            <include-sources dir="${src}" includes="*"/>
            <include-libraries dir="${core_path}" includes="**/*"/>
            <include-libraries dir="${internal_libs_path}" includes="*.swc"/>
            <external-library-path dir="${FLEX_HOME}/frameworks/libs/player/${target-player}" includes="*"/>
            <external-library-path dir="${FLEX_HOME}/frameworks/libs/air" includes="*"/>
        </compc>
    </target>
    <target name="swf">
        <mkdir dir="${swf}"/>
        <echo>-----------------------------------</echo>
        <echo>[swf] Building example...</echo>
        <echo>-----------------------------------</echo>
        <java jar="${FLEX_HOME}/lib/mxmlc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
            <arg value="${src}/StartUp.as"/>
            <arg value="-source-path+=${src}"/>
            <arg value="-swf-version=${swf-version}"/>
            <arg value="-target-player=${target-player}"/>
            <arg value="-library-path+=${internal_libs_path}"/>
            <arg value="-library-path+=${core_path}"/>
            <arg value="-output=${swf}/${swf_name}.swf"/>
            <arg value="-frame=two,${main_class}"/>
            <arg value="-keep-as3-metadata+=Autowired"/>
            <arg value="-keep-as3-metadata+=PostConstruct"/>
            <arg value="-compiler.advanced-telemetry=${debug}"/>
            <arg value="-debug=${debug}"/>
        </java>
    </target>
    <target name="test">
        <mkdir dir="${out}/tests/report/html"/>
        <java jar="${FLEX_HOME}/lib/mxmlc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
            <arg value="${basedir}/tests/TestSuite.as"/>
            <arg value="-source-path+=${src}"/>
            <arg value="-swf-version=${swf-version}"/>
            <arg value="-library-path+=${flexunit}"/>
            <arg value="-library-path+=${internal_libs_path}"/>
            <arg value="-library-path+=${core_path}"/>
            <!--<arg value="-library-path+=${as3-signals}"/>-->
            <arg value="-output=${out}/tests/TestRunner.swf"/>
            <arg value="-keep-as3-metadata+=Autowired"/>
            <arg value="-keep-as3-metadata+=PostConstruct"/>
            <arg value="-debug=false"/>
        </java>
        <flexunit
                command="${FLASH_PLAYER_EXE}"
                player="flash"
                swf="${out}/tests/TestRunner.swf"
                toDir="${out}/tests/report"
                haltonfailure="false"
                verbose="true"
                localTrusted="true"
                failureproperty="flexunit.failure"
        />
        <junitreport todir="${out}/tests/report">
            <fileset dir="${out}/tests/report">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${out}/tests/report/html"/>
        </junitreport>
        <fail if="flexunit.failure" message="Unit test(s) failed. See reports!"/>
    </target>
    <target name="clean">
        <delete dir="${out}"/>
    </target>
    <target name="increase_minor_version">
        <propertyfile file="version.properties">
            <entry key="build.minor.number" type="int" operation="+" value="1" pattern="0" />
        </propertyfile>
    </target>
    <target name="increase_major_version">
        <propertyfile file="version.properties">
            <entry key="build.major.number" type="int" operation="+" value="1" pattern="0" />
            <entry key="build.minor.number" type="int" operation="=" value="0" pattern="0" />
        </propertyfile>
    </target>
    <target name="increase_release_version">
    <propertyfile file="version.properties">
        <entry key="build.release.number" type="int" operation="+" value="1" pattern="0" />
        <entry key="build.major.number" type="int" operation="=" value="0" pattern="0" />
        <entry key="build.minor.number" type="int" operation="=" value="0" pattern="0" />
    </propertyfile>
    </target>
    <target name="upload_docs">
        <sshexec host="${sftp-host}"
                 username="${sftp-login}"
                 password="${sftp-password}"
                 command="${sftp-script-path} ${sftp-path}/${sftp-path-suffix}/doc"
                 trust="true"
        />
        <scp todir="${sftp-login}:${sftp-password}@${sftp-host}:${sftp-path}/${sftp-path-suffix}/doc" trust="true">
            <fileset dir="${doc}"/>
        </scp>
    </target>
    <target name="upload_swc">
        <zip destfile="${swc}/${ant.project.name}_latest.zip"
             basedir="${swc}"
             includes="*.swc"
        />
        <scp file="${swc}/${ant.project.name}_latest.zip" todir="${sftp-login}:${sftp-password}@${sftp-host}:${sftp-path}/${sftp-path-suffix}"
             trust="true"/>
        <delete file="${swc}/${ant.project.name}_latest.zip"/>
    </target>

    <!--//////////////////////////////////////////////////////////////////////////////////////-->

    <target name="prepare" depends="-init-ooo">
        <mavendep pom="pom.xml"/>
    </target>

    <!-- Set maven.deploy.repo to deploy to a local maven repo:
        ant -Dmaven.deploy.repo=file:///path/to/local/repo maven-deploy -->
    <target name="maven-deploy" depends="prepare,swc"
            description="Deploys build artifacts to a Maven repository.">
        <mavendeploy file="${swc}/${swc_name}" pom="pom.xml"/>
        <!--<maveninstall file="${swc}/${swc_name}" pom="pom.xml"/>-->
    </target>

</project>
